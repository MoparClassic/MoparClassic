import java.io.File
import java.io.FileNotFoundException
import java.util.Properties
import java.io.FileInputStream
import java.io.FileOutputStream

/**
 * Helps new users generate custom config files for their server.
 *
 * @author Joe Pritzel
 */
object ConfigGenerator extends App {

	// Find directories
	val projectRoot = new File(".").getAbsoluteFile.getParentFile
	val gsConfig = new File(projectRoot, "GameServer" + File.separator + "conf" + File.separator + "world.xml")
	val lsConfig = new File(projectRoot, "LoginServer" + File.separator + "conf" + File.separator + "Config.xml")

	// Confirm directories exist
	if (!gsConfig.exists) throw new FileNotFoundException("Can't find the GS config at " + gsConfig.getAbsoluteFile)
	if (!lsConfig.exists) throw new FileNotFoundException("Can't find the LS config at " + lsConfig.getAbsoluteFile)

	// Instructions
	println("Respond to statements with true or false.")
	println("When asked to enter a message, use XML friendly characters")
	println("&#10; is a new line, &lt; is the less than sign, etc.")

	new ConfigGenerator(gsConfig, Array(
		new Entry("What is the name of your server?", "name"),
		new Entry("What port do you want to run it on?", "port"),
		new Entry("The server is P2P.", "members"),
		new Entry("The wilderness is F2P.", "f2pwildy"),
		new Entry("What is the xp rate?", "expRate"),
		new Entry("What is the xp rate for subscribers?", "subExpRate"),
		new Entry("What is the non-combat xp bonus for the wild?", "wild-non-combat-bonus"),
		new Entry("What is the combat xp bonus for the wild?", "wild-combat-bonus"),
		new Entry("What is the minimum level to get the non-combat bonus in the wild?", "wild-non-combat-min-level"),
		new Entry("How long should a player have to stand still in the wild to log out for?", "wild-stand-still-time"),
		new Entry("There is a global message for players reaching the max level of a skill.", "max-level-congrats"),
		new Entry("How long is the afk timeout, in minutes?", "afk-timeout"),
		new Entry("What is the MOTD?", "MOTD")
	)).generate

	new ConfigGenerator(lsConfig, Array(
		new Entry("You allow multi-logging.", "allow-multilogging"),
		new Entry("You want the LS to cache saves.", "cache-saves"))
	).generate
}

/**
 * Generates a config file based on the entries provided.
 *
 * @author Joe Pritzel
 */
private class ConfigGenerator(config : File, entries : Array[Entry]) {

	def generate {
		entries.foreach {
			e =>
				println(e.question)
				e.value = readLine
		}

		val props = new Properties
		val fis = new FileInputStream(config)
		props.loadFromXML(fis)
		fis.close
		entries.foreach {
			e =>
				props.setProperty(e.id, e.value)
		}

		val fos = new FileOutputStream(config)
		props.storeToXML(fos, "Generated by the config generator")
		fos.close

	}
}

/**
 * Represents an entry in the XML file.
 *
 * @author Joe Pritzel
 */
private class Entry(val question : String, val id : String, var value : String = "")
